# 複数行編集
[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  let g:multi_cursor_use_default_mapping=0
  let g:multi_cursor_start_word_key = '<C-n>'
  let g:multi_cursor_next_key = '<C-n>'
'''

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#omni_patterns = {}
'''

# Pythonの補完
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python3'
hook_add = '''
  let g:deoplete#sources#jedi#python_path = '/Users/shunsuke.kawai/.pyenv/shims/python'
  let g:deoplete#sources#jedi#server_timeout=100
  let g:deoplete#sources#jedi#statement_length=100
'''

# pythonシンタックスハイライト
[[plugins]]
repo = 'hdima/python-syntax'
hook_add = '''
  let python_highlight_all = 1
  autocmd FileType python setlocal completeopt-=preview
'''

# オムニ補完
[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
  let g:SuperTabContextDefaultCompletionType = "context"
  let g:SuperTabDefaultCompletionType = "<c-n>"
'''

# ウィンドウサイズの変更
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<Leader>e'
'''

# Unite yfファイル閲覧
[[plugins]]
repo = 'Shougo/neomru.vim'

# Unite yyヤンク閲覧
[[plugins]]
repo = 'Shougo/neoyank.vim'


# Markdownのシンタックスハイライト
[[plugins]]
repo = 'vim-scripts/Markdown'

# Markdownをブラウザでプレビュー(:InstantMarkdownPreview)
[[plugins]]
repo = 'suan/vim-instant-markdown'
hook_add = '''
  let g:instant_markdown_autostart = 0
  nnoremap <Leader>m :InstantMarkdownPreview<CR>
'''

# pythonフォーマッタ
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_python_checkers = ["pep8", "flake8", "pyflake"]
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
'''

[[plugins]]
repo = 'mindriot101/vim-yapf'
hook_add = '''
  function! s:yapg_format()
    let cursor = getpos(".")
    call Yapf()
    unlet cursor
  endfunction
  if $WORK_MODE=='m3'
    autocmd BufWritePre *.py call <SID>yapg_format()
  endif
'''

# power line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  " https://sy-base.com/myrobotics/vim/vim-lightline/
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
        \ 'left': [ ['mode', 'paste'], ['readonly', 'filepath', 'modified'] ]
            \ },
    \ 'component_function':{
        \ 'filepath': 'FilePath'
            \ }
    \ }
  function! FilePath()
    if winwidth(0) > 90
        return expand("%:s")
    else
        return expand("%:t")
    endif
  endfunction
  set laststatus=2
  set noshowmode
'''

# 閉じカッコの補完
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_no_default_rules = 1
  call lexima#set_default_rules()
'''

# <C-/><C-/>でコメント
[[plugins]]
repo = 'tomtom/tcomment_vim'

# vvvで選択範囲拡張
[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''

# 置換のビジュアライズ
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>' : 's'
  nnoremap <silent> <Leader>s :OverCommandLine<CR>%s//g<Left><Left>
  vnoremap <silent> <Leader>s :OverCommandLine<CR>s//g<Left><Left>
'''

# yank拡張
[[plugins]]
repo = 'bfredl/nvim-miniyank'
hook_add = '''
  map p <Plug>(miniyank-autoput)
  map P <Plug>(miniyank-autoPut)
'''

# nerdtree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  nnoremap <Leader>n :NERDTreeToggle<CR>
  let g:NERDTreeNodeDelimiter = "\u00a0"
  let g:NERDTreeShowHidden=1
  let g:NERDTreeIgnore=['\.DS_Store$', '\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
  autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
'''

# nerdtreeにgit表示
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'


# terminalの表示
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
  set sh=zsh
  let g:neoterm_size = 30
  let g:neoterm_autoinsert = 1
  let g:neoterm_autoscroll = 1
  function! TermT()
    if g:neoterm.has_any()
      call neoterm#toggle({'mod': '', 'target': 0})
    else
      call neoterm#toggle({'mod': 'belowright', 'target': 0})
    end
  endfunction
  nnoremap <Leader>t :call TermT()<CR>
'''

# Ag検索
[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
  nnoremap <Leader>g :Ag 
'''

# Unite
[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_file_mru_limit=200
  nnoremap <Leader>y :<C-u>Unite history/yank<CR>
  nnoremap <Leader>h :<C-u>Unite file_mru<CR>
'''

# markdownのheadを読む
[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = '''
  nnoremap <Leader>o :<C-u>Unite outline<CR>
'''

# 括弧囲むやつs, ds, cs
[[plugins]]
repo = 'tpope/vim-surround'

# surroundをドットコマンドで繰り返す
[[plugins]]
repo = 'tpope/vim-repeat'

# monokai
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
  colorscheme molokai
  syntax enable
  let g:molokai_original = 1
  set t_Co=256
'''

# _+jkで空行飛ばし
[[plugins]]
repo = 'tyru/columnskip.vim'
hook_add = '''
nmap <Leader>j <Plug>(columnskip:nonblank:next)
omap <Leader>j <Plug>(columnskip:nonblank:next)
xmap <Leader>j <Plug>(columnskip:nonblank:next)
nmap <Leader>k <Plug>(columnskip:nonblank:prev)
omap <Leader>k <Plug>(columnskip:nonblank:prev)
xmap <Leader>k <Plug>(columnskip:nonblank:prev)
'''
